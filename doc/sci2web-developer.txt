.. .
   ////////////////////////////////////////////////////////////////////////
   //           _ ___               _					 //
   //          (_)__ \             | |					 //
   //  ___  ___ _   ) |_      _____| |					 //
   // / __|/ __| | / /\ \ /\ / / _ \ '_ \				 //
   // \__ \ (__| |/ /_ \ V  V /  __/ |_) |				 //
   // |___/\___|_|____| \_/\_/ \___|_.__/				 //
   // 		     	    						 //
   // Bringing naturally developed scientific applications to the web	 //
   // Jorge Zuluaga (2011)	   	      		      	  	 //
   ////////////////////////////////////////////////////////////////////////
   .
.. include:: util.txt

=======
Sci2Web
=======
---------------------------------------------------------------
Bringing naturally developed scientific applications to the web
---------------------------------------------------------------

Guide to the developer
**********************

:Author: Jorge Zuluaga
:Version: Revision 1, Tue Nov 15 00:00:42 COT 2011
:Copyright: This document has been placed in the public domain.

Presentation for the Developer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is Sci2Web_.

------------------

Install Sci2Web in a new server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To install Sci2Web_ in a new server follow the steps described below:

#. Get the source code and decompress and untar in a proper server
   directory.  You have to track the directory where the Sci2Web_ is
   installed.  Hereafter we will call it the **PROJPATH**.::

   $ cd PROJPATH

#. Set the proper permissions for the directories in the Sci2Web_
   directory::

   $ chmod a+x tmp	
   $ chown www-data.www-data runs
   $ chown www-data.www-data apps/templates/*.html

   Here you have to replace ``www-datat`` for the appropiate user and
   group of your web server user.

#. Create the user of the database.  Using any interface to your
   database server (Sci2Web_ is configured to use MySQL) create a
   particular user for the platform operations:

   mysql> create user 'sci2web'@'localhost' identified by 'WebPoweredNDSA';
   mysql> grant all privileges on sci2web.* to 'sci2web'@'localhost';
   mysql> flush privileges;

   .. Important:: You have to remember and safely store the password of
      the user database.

#. Create database and basic tables and populate them.  In the doc
   directory you will find text files, ``sci2web-create.sql``,
   ``sci2web-populate.sql`` containing all the required sql commands
   to create the database and their basic tables.  Using mysql command
   line interface you can easily create the database executing::
   
   $ mysql -u root -p < sci2web-create.sql
   $ mysql -u root -p < sci2web-populate.sql

   By default the databases are created with an example application,
   `Diffusion` and its respective development version `dev` and a
   master user `zuluagajorge@gmail.com`.

#. Configure the Sci2Web_ server website.  Edit the configuration file
   ``lib/sci2web.cong``.  Specially the following variables:

   + ``PROJBASE``: Base directory at the server where the project is
     installed.  Normally this is the name of the subdirectory in the
     web server (e.g. /var/www for linux apache2 servers) where the
     Sci2Web_ directory is installed.

   + ``PROJNAME``: Name of the subdirectory wher the Sci2Web_ platworm
     was installed.

     The PROJBASE and PROJNAME variables togheter with the server URI
     form the base URL of the Sci2Web
     site::``http://SERVERURL/PROJBASE/PROJNAME``.

   + ``SCI2WEBSITE``: This is the name of the server where Sci2Web_ is
     being served.  In principle many instances of the Sci2Web_
     platform could be installed around the world.  This variable
     individualizes them.

   + ``TITLE``: Title of the project that will be presented in the web
     pages header.

   + Database information.  ``DBNAME``, ``DBSERVER``, ``DBUSER`` and
     ``DBPASS`` are the variables controlling the access to the
     database.  

   .. Important:: It should be stressed that the access to this file
      should be maintained as restricted as possible since it contains
      critical information about the website.  If you want to protect
      the file change the owner and permissions of the file to make it
      readable only for the www-data user.

#. Once this file has been properly set you can test the access to the
   site using the link:
   ``http://SERVERURL/PROJBASE/PROJNAME/test.php``.  This simple
   script test that key components of the site are loaded properly
   (javascript files, css file, database access, file access, among
   others).  If you still have problems with files please check the
   steps before in order to adjust the permissions.

#. If everything goes OK with the test you can try to go directly to
   the main site ``http://SERVERURL/PROJBASE/PROJNAME``.

#. Create a new user.  It is specially important to create the users
   that will register the first ported applications.

#. Before to start using Sci2Web you have to be sure that:
   
   #. Web user can submit jobs to the queue selected by the platform
      (at by default).  If the queue is at please uncomment the proper
      line at the /etc/at.deny file.

   #. The shell used to executed files with the at queue is bash.  You
      can do this changing the symbolic link /bin/sh to /bin/bash

------------------

Porting an Application
~~~~~~~~~~~~~~~~~~~~~~

Port an application to the Sci2Web_ platform is a relatively simple
process.  Just follow the steps presented below and your application
will be on-line:

#. **Name your application**.  You will need a name for your application.
   You have to select two names: a short one and a long one.  The
   short one will be used, among other key purposes, to name the
   directory where the application will be installed.  The long name
   will be used in the description web page of the application.

   Here we will refer generically to this names as **APPNAME** and
   **APPLONG**.

#. **Create a new directory for your application in the applications
   repository**::
   
   $ mkdir -p apps/APPNAME/dev

   The directory ``dev`` will be used to install the developing
   version of the application.  This is the starting version used to
   test the application in the platform.

#. **Get a fresh copy of all the required files of the application in a
   single directory**.  Copy all the files in the application repository
   under the version directory ``dev``::

   $ cp APPDIR/* apps/APPNAME/dev

   Here the APPDIR is the directory where all the application files
   reside.  

#. **Be sure that the application runs properly in the new
   directory**.  Here you have to verify that all the required
   packages and libraries are properly installed in the server.  If
   you forget to properly test the application at this stage, later
   will be hard to debug the problems arosed during the execution of
   the application with the web interface.

   .. Important:: After all the required test do not forget to clean
      up all the files in the application directory.  Any undesired
      and temporal file remaining there will be copied to all the
      future instances of the application.

#. **Describe the general features of the application and the
   version**.  Create a text file ``apps/APPNAME/app.info`` with the
   following information::
   
	app_code_name='APPNAME',
	app_complete_name='Completa Name of the Application',
	users_emails_author='author@server',
	brief_description='Brief description of the application'

   It is important to not forget the final ',' at the end of each line
   (except the last one) and to respect the lower case.  These are the
   fields of the database table corresponding to the ported
   application.

   Create a similar text file describing the developing version and
   place it at ``apps/APPNAME/dev/ver.info``::

	version_code='VERSION_NAME',
	apps_code_name='APPNAME',
	users_emails_contributor='contributor@server',
	changes_log='Brief detail about how this version is different from other'

   An example of both files can be found in the template application
   at apps/template.

#. **Register the new application**.  Once the directory of the
    application and the development version have been created it is
    time to register the new application and its default version in
    the Sci2Web_ database::

    $ perl bin/sci2web-regapp APPNAME dev

    This command could be used to register future versions of the
    same application.

#. **Sign up with the e-mail of the application author and version
   contributor**. In order to access to the application files with
   special permissions it is recommended to sign up at the Sci2Web
   local server site using the e-mails of the application author and
   version contributor.

#. **Edit the web files of the application**.  The application will
   have a dedicated web page for the access of the users.  The
   application web page is customizable.  In order to customize the
   components of the application web page perform the following
   actions:

   #. *Prepare the logotype of the application*.  You will find an
      "OpenOffice Draw" template file in the application directory
      where you can edit your logo. There are two versions of the
      logo: the icon logo, used to identify the application in
      different lists and the complete logo used in the header of the
      application web page.  To customize the application logo, open
      the template draw file and export the icon separately and the
      complete logo and save them as "APPNAME-logo.jpg" and
      "APPNAME-icon.jpg" in the base directory of the application.
      The web page of all versions of the application will share the
      same logo.

   #. You can manually edit the html files describing the applications
      and its initial version and other relevant information.  In the
      application directory you will find the following html files:
      APPNAME-desc.html, APPNAME-down.html and APPNAME-doc.html.  They
      contain the complete description of the application, download
      information for the application (if aplicable) and access to
      other documentation related to the application (including for
      example white papers and published papers).

      Manual edition of this file requires basic skills in html.  You
      can also find free tools to create html files using offline
      editors.  OpenOffice allows you for example to save a document
      in html format.  

      To facilitate the edition of these files Sci2Web allows you to
      edit their content using an on-line "wysiwyg" editor and once
      the author user logs in and the application page is open in the
      Sci2Web local server site.

Once the preceeding basic steps are completed you will be able to
access the application page in the Sci2Web_ local server site under
the tab Applications.  

At this point however you will not be able to create or run an
instance of the application.  You should first configure properly your
application in order to use it.  In the following we describe how to
succesfully configure and customize a runable application at the
Sci2Web_ platform:

#. **Describe the particular commands used in the life cycle of your
   application**.  Before an instance of your application can be ran
   you normally perform actions required for the normal operation of
   the application.  You can for example clean the running directory
   from any pre-existent data or configuration file, you can compile
   the program, prepare a submission script, etc.  Once the
   application has ran, it is common to run also post-execution
   scripts or additional programs.  All these actions configure what
   we will call the *life cycle of the application*.  The Sci2Web_
   engine has to know all these details in order to succesfully
   execute an instance of your program.  

   The life cycle commands are described in the configuration file
   ``apps/APPNAME/VERSION/sci2web/s2w-config``.  `Here
   <../apps/template/version/sci2web/s2w-config>`_ you will find the
   template file for a typical application life cycle.

   The life cycle of any programa is normally divided in these steps:
   clean |Rarr| compile |Rarr| pre-execution |Rarr| submission (run)
   |Rarr| [pause] |Rarr| [resume|stop] |Rarr| post-execution.  Actions
   in square brackets are optional.  In the life cycle configuration
   file you will give the specific commands you want to run at the
   application directory to perform this particular actions.  You can
   describe this action as a simple linux command using the
   ``ACTIONCMD`` variable or passing the fullname of a custom bash
   script (variable ``ACTIONSCR``).  If the script variable is not
   null the command variable will not be considered.

   Once the life cycle has been configured you can execute any action
   by invoquing the action script ``sci2web/bin/s2w-action.sh``::

      $ bash sci2web/bin/s2w-action.sh clean

   Several actions can be performed with a single command::

      $ bash sci2web/bin/s2w-action.sh clean compile pre

   Submission, pause, resume and stop actions are critical and several
   important considerations should be made:

   #. To submit the execution of the application, Sci2Web_ control
      scripts use by default the ``at`` command.  You can replace this
      behavior changing the source code of the action script in order
      for example to submit jobs at any queue system installed at the
      server.  One typical change is to use ``batch`` instead of
      ``at`` since the first one allows to run processes only if there
      is available processor power at the server.

   #. Pausing or stopping a running program is a tricky process.
      There is no a standard way to do it without changing the
      application source code.  We recommend very positively,
      specially if the application could take a long time to be
      executed, to include a pausing mechanism in the source code.

      If you have no control on the source code or does not want to
      touch it, just left blank the PAUSESCR, PAUSECMD, RESUMECSR and
      RESUMECMD variables in the lifecycle configuration file.  In
      that case the pause action will be replaced by the ``kill``
      action.

   #. It is important that your program or your run script (if
      applicable) creates at the end of the execution a signal file
      named ``end.sig``.  This will inform the control scripts that
      the application ends succesfully.  You can do this easily
      including at the end of the source program a command to create
      an empty file with that name or if you cannot modify the source
      code or simply does not like to do it, add the command ``touch
      end.sig`` at the end of the run script.

   .. Important:: Be aware that the following file extensions are
      reserved for the Sci2Web_ interface: ``.oxt`` (text output files
      and Sci2Web_ data files), ``.sig`` (signal files used by the
      control script), ``.info`` (information and configuration
      files), ``.ps2w`` (plotting configuration files).  Be careful
      when using this extensions in your own applications.

#. **Find the files of your application that could change from run to
   run and create templates from them**.  One or more files in your
   application changes from run to run, i.e. there are files that will
   have variables or pieces of code that could be configured by the
   application user.  For each file fullfilling this condition create
   a *template copy* in the same subdirectory where the normal file is
   placed::

    	 $ cp subdir/file.ext subdir/.file.ext.temp

   In each file substitute those parts that changes according by a
   *substitution rule* ``[[VarName]]`` or
   ``[[VariableName::DefaultValue::TypeOfVariable::CompleteName::Tab::Group]]``
   (see below for an explanation of the substitution rule
   syntax). Here you can substitute almost any piece of the file
   (fitting a single line) by a variable.  You can generate a template
   of almost any file in your application ranging from configuration
   files, source code, makefiles to the util files coming directly
   with the Sci2Web_ interface (files in the sci2web subdirectory).

   For example if you have a source file ``parameters.h`` containing
   the line::

    	#define UNITS 1.0E-1

   And you want that the value of this macro could be changed when
   configuring a run of the application you just have to create a
   template copy ``.parameters.h.temp`` and replace the line by::

        #define UNITS [[Units]]

   Note that we are using here the short description of the variable.
   Each variable should be describe in detail by using a complete
   *substitution rule* at least in one of the template files.

   **Application Variables** defined in template files are central
   components of the Sci2Web_ interfaces.  The set of variables
   defined implicitly in templates files constitutes what we will call
   the *Application Parametrization*.

   Application variables have the following basic properties:

   * **Variable name**: the name of the variable at the programming level.
     It should obeys the typical rules of variable names (e.g. no
     blank or special characters)

   * **Variable default value**: default value of the variable.  There
     are different ways to specify the default value.  Each way
     determines how the input of the variable is asked in the web formu:
     
     - *Single value* (e.g. 3): the input is a simple text box.

     - *Range of values* (e.g. 0-10:5): dashed separated range of
       values plus default value in the range.  Input is performed
       using a simple text box plus a displacement bar.

     - *List of values* (e.g. Yes;No:Yes): comma separated set of
       values plus default selection.  Input is performed using a
       selection tool.

     - *Boolean values* (e.g. true): value is indicated as true or
       false.  Input is performed with a checkbox.

   * **Type of variable**: data types follows the mysql convention
     without modifiers (e.g. int instead of int(8)):
     float,int,varchar,text,bool,file.  Data types bool and file are
     specific of Sci2Web_.  If the variable is a file the input is
     performed using a "choose file" element.

   * **Complete name of the variable**

   * **Tab**: variables are input in a tabbed form.  Here you indicate
     in which tab the variable should be placed.  The input form could
     have a single tab.

   * **Group**: in each tab variables are organized by input groups.
     Here you indicate to which group the variable belongs.  Each tab
     of the input form could have a single group.

   A variable is described using a substitution rule::

     [[VariableName::DefaultValue::TypeOfVariable::CompleteName::Tab::Group]]

   It is also possible to describe in detail all the variables of an
   application using a special configuration file
   ``sci2web/.variables.info.temp``.  You could place in that file all
   the detailed variable definition and then put the simple reference
   to the variable (e.g. ``[[VariableName]]``) in all the template files
   files.

#. **Configure the result variables**.  Many application have not only
   input but also output parameters.  This kind of parameters are used
   to report the global result of complex computations.  For Sci2Web_
   result variables are very important for database purposes.  Not
   only the full information of a run is stored in the Sci2Web_
   website.  Also a particular database associated to each version of
   an application is created and populated with the values of the
   input and output variables.  This allows other users to search for
   results already computed with a set of input parameters instead of
   running again the application.

   Result variables or output variables could be defined and descibred
   in the same way as input variables.  The only thing that
   distinguish them from other variables are that they belongs to the
   "Results" tab.  The default value of an output variable should be a
   single value.  As the output variables are not currently present in
   any of the application file you could add them to the
   ``sci2web/.variables.info.temp`` template file.

   .. Important:: How the output variables are set?  The default value
      given at the configuration step of an output variable is just a
      reference value useful to check if a computation has been
      succesfully performed.  The programmer should write down in the
      post execution script the commands required to extract the
      result values and populate a file named ``results.oxt`` where
      these values will be published.  The format of the
      ``results.oxt`` should be the same as a configuration file::

      	 #This is a result variable
      	 VariableName = Value

#. **Compile configuration information about the application**.  Once
   the application is ready, the proper files has been obtained, the
   application has been registered in the database and the template
   files has been created and prepared we are ready to *compile* all
   the configuration information required to run the application using
   Sci2Web_.  To perform the compilation run::

      $ perl sci2web/bin/sci2web-compapp
   
   This process will read all the template files in the application
   directory and it will create three files:
   ``sci2web/parametrization.info``, ``app.conf`` and
   ``sci2web/templates/Default.conf``.  The first file is the
   parametrization description of your application.  Please check that
   the right set of variables and their properties are properly
   defined in that file.  The ``Default.conf`` file is a default
   configuration file for a run.  Please check also that the
   information in this file is correct

#. **Test the compilation**.  Before to use the application with the
   Sci2Web_ interface it is interesting to test the application by a
   configuring the default run::

      $ perl sci2web/bin/sci2web-genfiles . sci2web/templates/Default.conf

   If no error arises you can check the basic steps of the running
   process::

      $ bash sci2web/bin/s2w-action.sh clean compile pre

   If you are confident enough run the application::

      $ bash sci2web/bin/s2w-action.sh submit

   and test the post execution tasks::

      $ bash sci2web/bin/s2w-action.sh post

   Check that the result variables files ``results.oxt`` has been
   populated with the results of the run.

   Perform other checks you consider *healthy* before trying to use
   the web interface.

#. **Configure the Result Window**.  The web interface provided by
   Sci2Web_ has three main componentes:

   + The application run queue.  This component is integrated to the
     application web page and allows you to create, remove and control
     your runs.

   + The configuration window.  This is the central component of the
     interface.  Using the configuration window you will be able to
     input the value of the input variables of your run.  

   + The results window.  Once a run is completed you will have access
     to the results using this component of the interface.  The result
     window is fully configurable and can give you information about
     the standard output and standard error of the programs, plots and
     images, and any file you will want to display.  You will be able
     also to control the application using a specially designed module
     for this window.

   To configure the result window modify the
   ``sci2web/result-window.conf`` configuration file.  In this file
   you will find described each tab of the result window.  Find `in
   this link <../apps/template/version/sci2web/results-window.conf>`_.
   The results window is divided into tabs.  Each tab has four
   attributes:

   * Tab name.  This is the name appearing in the tab box.

   * Content.  This attribute describes what do you want to display in
     the tab content.  Tab content could be:

     + File: displays the content of a file including a plot.
     
     + Module: display predefined static and dynamic content.  In the
       present version the following modules are available:

       - Status: display status information.  Advance bar, execution
         time, total elapsed time, size of the output files, etc.

       - Control: control buttons.

       - ListFiles: list of files in a given subdirectory.
         Parameters: `SubDir` (name of the subdirectory to
         show; default \'.\'), `Filter` (filter to apply to subdyrectory;
         use syntax of the linux shell; default \'\*\').

       A module can have parameters that are provided using a similar
       syntax that php scripts,
       e.g. ``ListFiles?SubDir=plots&Filter=*.png``

     + Script: an ajax script available in the ``bin`` directory with
       their respective parameters.

#. **Test the web interface**.  Now you are ready to test the proper
   running of the application using the web interface.  This is a
   *debugging* kind of process so be patient and repeat as required
   the preceeding steps until your application run as desired.

Acronyms and Glossary
~~~~~~~~~~~~~~~~~~~~~

**NDSA**

	Acronym for *Naturally Developed Scientific Application*.
	NDSA are applications developed "spontaneously" by scientist
	as a part of a research effort.  Besides differences in the
	purpose, methods and techniques used to develop this type of
	applications they share very common features.
	
	* Most of them are developed in low level languages
          (C/C++,Fortran)

	* Have a very simple user interface (configuration file,
          non-standard command line input, keyboard input, etc.)

	* They are poorly documented and tested.

	* ...
	
**Ported Application**
	 
	 A *Ported Application* or *Ported NDSA* is an application
	 configured to run with the Sci2Web_ interface.

.. .
   //////////////////////////////////////////////////////////////////////
   //REFERENCES
   //////////////////////////////////////////////////////////////////////
   .

References
~~~~~~~~~~

.. _Sci2Web: http://localhost/user/Sci2WebPP
