.. .
   ////////////////////////////////////////////////////////////////////////
   //           _ ___               _					 //
   //          (_)__ \             | |					 //
   //  ___  ___ _   ) |_      _____| |					 //
   // / __|/ __| | / /\ \ /\ / / _ \ '_ \				 //
   // \__ \ (__| |/ /_ \ V  V /  __/ |_) |				 //
   // |___/\___|_|____| \_/\_/ \___|_.__/				 //
   // 		     	    						 //
   // Bringing naturally developed scientific applications to the web	 //
   // Jorge Zuluaga (2011)	   	      		      	  	 //
   ////////////////////////////////////////////////////////////////////////
   .
.. include:: util.txt

.. image:: ../images/sci2web-mainlogo.jpg 
   :height: 100px

Developer Guide
***************

:Author: Jorge Zuluaga
:Version: Revision 1, Wed Nov 30 06:29:15 COT 2011
:Copyright: This document has been placed in the public domain.

.. contents:: Table of Contents
   :backlinks: entry

Abstract
~~~~~~~~

This document explains how to port an application to a Sci2Web_ server
site.  The process of porting a *Naturally Developed Scientific
Application (NDSA)* starts by testing your application at the web
server where it will be installed.  You need to be sure that your
application runs properly from the command line before trying to
configure and control it from a web interface.  If the application
depends on third party software (libraries, languages, external
packages, etc.) they could be installed in the web server or simply
copied among the application files.  By porting an application to
Sci2Web_ minor modifications should be done on the application source
files (if available) and no web or graphical programming is required
at all.  This is the most important advantage of using Sci2Web_ to
create a friendly interface to your applications.  Many properties of
the web interface and the mechanisms used by Sci2Web_ to control the
preparation and running of the application can be configured and
customized as will be explained here.  If you have already ported an
application and want to test it read the `Sci2Web user guide
<user.txt>`_.

Presenting Sci2Web_
~~~~~~~~~~~~~~~~~~~

Sci2Web_ is a tool to provide graphical web interfaces to *Naturally
Developed Scientific Applications* (NDSAs).  NDSAs is a generic name
we use to call those programs developed or adapted by scientist and
used in scientific research.  Although today you can find powerful
scientific software providing advanced graphical and user interfaces
(e.g. Reduce, SAGE, Mathematica, Matlab) many scientific work still
depend on programs developed in low level programming languages (C,
fortran).  Even although a growing number of scientist are using
powerful and modern languajes (C++, Java, Python) their programs still
have simplified user interfaces and most of them lack of a proper
graphical interface (in most cases these interfaces are simply not
required or not important in the scientific work).  

Most of the time scientists restrict their programs just for their
personal use or share it only with close colleagues.  But from time to
time a *good piece of code* arises having the potential to become a
publickly available program.  The decision to share a program and
allows other to use it is a wise decision that in some cases have a
very positive impact on the visibility of the developer scientific
work.  However the development of software intended for *final users*,
even although they could be experts, could be a challenge even for a
skillful scientific developer.  Many skills are required ranging from
operating system programming to advanced graphical interfaces
development. 

Sci2Web_ is a solution created for those scientist who desire to share
the software they developed with a wider scientific community but to
the lowest developing cost.  Imagine to have an *active web page* (a
web page whose content changes according to the user input) able to
configure and control the execution of your programs?  This is exactly
what Sci2Web_ provides you.  If you want to see a living example go
now to the `Diffusion application <http://www.google.com>`_.

Sci2Web_ is not a content or a version management software.  It simply
provides the required tools to configure and run NDSA applications
using the web.

Quick start (Summary)
~~~~~~~~~~~~~~~~~~~~~

If you have not enough patience to read the rest of this document and
think that you can *interpolate* many of the details regarding the
configuration of a new Sci2Web_ application, follow the next steps and
get an usable web interface to your NDSA in a couple of minutes:

#. Place all your application files and any other third party files in
   a single directory.

#. Test your application in the command line and be sure it runs
   properly solving all the potential dependencies.

#. Initialize your application as a Sci2Web_ application::

   % perl SCI2WEB_PROJPATH/sci2web.pl init --appname <ApplicationName> --vername <VersionName> --emails <ContributorEmails> --changeslog <ShortDescription>

#. Identify those files containing the *control variables* (variables
   the final user could change using the web interface), create
   templates for each of them and replace the variable for a
   substitution rule::

      % cp parameters.ini .parameters.ini.temp

   Original content::

      10000
      0.1
      3 5

   New content::

       [[NumberParticles::10000::int::Total number of particules]]
       [[MeanFreePath::0.1::float::Mean free path]]
       [[Width::3::float]] [[Heigh::5::float]]
   
#. Identify the results variables and describe it using substitution
   rules in the file ``.results.info.temp`` (a copy of this file could
   be found in the ``sci2web`` directory but it is recommended to copy
   it into the root directory of the application.

#. (optative) Modify the code to allow pausing, stopping and resuming
   actions.  Also include code to check the status of the execution.

#. Compile the control and result variables and fill automatically
   other configuration files for the application::
   
       % perl sci2web/bin/sci2web.pl contvars --appdir .

#. Check the generation of source files from template files using the
   default value of control variables::

       % perl sci2web/bin/sci2web.pl genfiles --runconf sci2web/templates/Default.conf --rundir .

#. Configure your application.  To perform this task edit the
   following files following the instructions outlined in their
   templates (we assume that all the files are in the ``sci2web``
   subdirectory): ``version.conf``, ``runpipeline.conf``,
   ``resultswindows.conf``, ``sharedfiles.info``, ``outfiles.info``

#. Test the run pipe line.

      % bash sci2web/bin/sci2web.sh test

#. Install your application version in a Sci2Web_ server site::

      % perl SCI2WEB_PATH/bin/sci2web.pl install --appdir .

#. Test it!   

Testing your application in the command line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The scenario: you have just finished to debug a piece of sofware you
have been using in your research.  The software seems interesting
enough for other scientists working in your field and you finally
decided to share it with colleagues.

Your software is a bunch of source files written probably in different
languages, data files, scripts and third party tools (binaries,
libraries, header files, etc.) included or not among your files.  

The user interacts with your program in different ways.  It is
probably that your software uses specially formatted input files to
set up the program and takes other input data, on which probably the
action occurs, from other data files.  It is also possible that some
information enters to your programs and scripts through the command
line.  More strange is that your software depends on some input given
from the keyboard.  In that case and as a general rule of thumb we
recommend to avoid any interactive input since it will make harder to
run the program in batch mode (unsupervised runs).

The output of the program can be also diverse ranging from data going
to the standard output and standard error, new data files and why not
a figure or a plot produced by some plotting program (e.g. gnuplot).
Again we recommend that all plots produced by your software be
redirected to an image file eliminating any dependence of an available
X connection.

If you are organized enough your application includes also a simple
documentation prepared in some kind of readable format (text or html
files).

All these features are typical of most of the applications developed
by scientist as part of their research.  We are calling here this type
of software *Naturally Developed Scientific Applications, NDSA*.  A
pictorial model of the structure and interface of a generic NDSA is
depicted in figure 1.

.. image:: images/NDSA-interface-model.jpg

The first condition you have to meet in order to configure and control
your application with Sci2Web_ is that the application compiles and
run properly from the command line.  You should perform this test in
order to check if all the third party software (inlcuding compilers
and libraries) are installed.  Another reason to make this first test
is to see if the program at run time is able to load *share libraries*
an issue not always easy to solve.

Preparing the application
~~~~~~~~~~~~~~~~~~~~~~~~~

It is time to configure your application in order to use Sci2Web_ as
the web interface to control it.  In the following we will call this
procedure *application porting*.  To illustrate how to port an
application to Sci2Web_ we will work with the sample application
already installed in the Sci2Web_ server site you have installed.  A
fresh copy of the example application is found at ``doc/examples``.  

Try to follow the procedure described below using your own
application.

Our sample application has been copied and tested in a directory
called ``Diffusion``.  This directory could be placed anywhere in your
server.

Our example application has the following components:

- Source files: diffusion.c, diffusion.h, Makefile.

- Input files: parameters.ini

- Third party software: C compiler (external), gsl library (external)
  and gsl header files (included among the files of the application).

- Extra: an empty directory called ``scratch`` where temporal data
  files are stored in running time.

In order to run the application we should compile it::

   % make diffusion.out

and run it passing the name of the output file through the command
line::
	
   % ./diffusion.out salida.txt

The application computes the trajectory in a random walk of a given
number of *dust* particles (by default 10000) inside a twi dimensional
rectangular box.  The purpose is to compute several statistical
properties of the system such as the average number of dispersions and
the final distribution of dust particles in the box walls.

When the program is ran, it shows in the screen (standard output) the
last position of a selected number of particles (by default 1 each
100).  Additionally, for the particles whose position is shown in the
screen the program stores all the points in its random trajectory.
The trajectory is stored in the directory ``scratch`` in files called
``path-<i>.dat`` where ``<i>`` is the number of the particle.

The next steps require some help of a set of special scripts called
the **Sci2Web utility scripts**.  The scripts are located in the
directory ``SCI2WEB_PROJPATH/bin`` where ``SCI2WEB_PROJPATH`` is the
directory where Sci2Web_ was installed in your server
(e.g. ``/var/www/Sci2Web``).  You may want to include this directory
in your path to simplify the following steps.  In other case you will
have to invoque the scripts using the complete path.

Initialize your application as a Sci2Web application
====================================================

All the Sci2Web_ configuration information about your application is
stored in specially formatted files that should be copied and edited
in the directory of your application.  You can initialize all those
files with a single command using the perl *utility script*
``sci2web.pl``::
	
  % perl SCI2WEB_PROJPATH/sci2web.pl init --appname <ApplicationName> --vername <VersionName> --emails <ContributorsEmails> --changeslog <ShortDescription>

where ``<ApplicationName>`` is the name of your application and
``<VersionName>`` is the name of the version you are presently
configuring.  ``<ContributorsEmails>`` is a list of the ``;``
separated e-mails of the contributors of this version of the
application.  The contributors emails will be used to identify which
users has super user grants on the version webpage.
``<ShortDescription>`` is a short description of this version and how
it is different from previous ones.

.. Important:: Applications in Sci2Web should have proper names that
   will be used to identify them not only in the database, the
   filesystem or in all the programs of the tool, but also in the web
   pages of the server site. We strongly recommend to choose properly
   the names of you applications.  For example avoid the use of
   *cryptic* names or very short or encoded names and please **DO
   NOT** use spaces or special symbols in the names of your
   application.

   Each Application could have multiple versions.  This is a very
   important feature of Sci2Web_.  Since scientific application evolve
   sometimes very fastly and it is hard to ask users to follow any
   change you make in your application, versions will be the way as
   the developer takes *snapshot* of its work and release static
   versions of the application.  If new changes must be done on a
   given version of your application is better to create a new version
   instead of change an existing one.  To reduce the burden of create
   versions for any change you make on your applications (actually not
   all changes will require the creation of completely new versions,
   the most critical changes involve the control variables defined in
   the next section) we recommend the creation of an initial version
   of any application called the ``dev`` version intended to be
   continuously modified.  Final users will not be able to see that
   version.

To initialize our sample application the command will be::

  % perl SCI2WEB_PROJPATH/sci2web.pl init --appname TestDiffusion --vername dev --emails test@sci2web.org --changeslog "Development version"

Please notice that we are using the name ``TestDiffusion`` instead of
``Diffusion`` simply because an application with that name has been
already installed with the initial files of the server site.  

As has been said before the initialization step creates all the
configuration files required to set up a Sci2Web application and
gather them in a single subdirectory named ``sci2web``.  Do not move
or change the name of this subdirectory.

Once your application has been initialized you have to fill out the
configuration files.  Several files are automatically filled using the
utility scripts by other ones should be eidted manually.

Select the *control variables*
==============================

The first step to configure a Sci2Web_ ported application, is to
select the variables that could be controlled by the user.  We will
call them the *control variables*.  The value of the control variables
will be passed by the user using a web form in the Sci2Web_ interface.

The most natural source of control variables are the input files.  In
our sample application case this role is played by the
``parameters.ini`` file::

   10000
   0.1
   3 5

The first value in this file is the total number of particles that
will be used in the simulation.  The second one is the mean free path
in program units (see below).  The fourth and fifth parameters are the
width and height of the box also in the units of the program.

If you want that the user controls the value of all this variables
create a copy of this file with the name ``.parameters.ini.temp``
(*template file*) and substitute the values of the variables by::

   [[NumberParticles::10000::int::Total number of particules]]
   [[MeanFreePath::0.1::float::Mean free path]]
   [[Width::3::float]] [[Heigh::5::float]]

The code between double square brackets is called *substitution rules*
and have two functions: 1) *tag* the place in a file where a control
variable should be replaced by the value given by the user and 2)
provide complete information to Sci2Web_ about the control variables
itself, such as the internal name of the variable, the *numeric* type
and even the help text that will appear close to the input element in
the web form (see below).

The general syntax of a substitution rule is::
    
   [[VariableName::DefaultValue::TypeOfVariable::CompleteName::Tab::Group::HelpText::ReadOnly]]

Where:

* **VariableName**: the name of the variable at the programming
  level.  It should obeys the typical rules of variable names (e.g. no
  blank or special characters)

* **DefaultValue**: default value of the variable and type of input in
  the web interface.  There are different ways to specify the default
  value of a control variable.  Each way determines which input
  element will be used in the web form:
     
  - *Single value* (e.g. 3): the input is a simple text box.

  - *Range of values* (e.g. 0--10==5): double dash separated range of
    values plus the default value assumed in that range.  In this case
    the input is performed using a simple text box plus a scroll bar.
    This method is strongly recommended when certain values of a
    variable should be avoided.

  - *List of values* (e.g. Yes;;No==Yes): double comma separated set
    of values plus the default selected one.  Input is performed using
    a selection tool.

  Another type of input methods are used according to the variable
  type (see next item):

  - *Boolean values* (e.g. 1 or 0): value is indicated as 1 or 0.
    Input is performed using a checkbox.

  - *Files*: Input is performed using an upload button.

  - *Text*: Input is performed with a textarea element.

  .. important:: The input method determined by the variable type
     overrides the DefaultValue specification.  For example if you
     create a variable with Default value ``Yes;;No==Yes`` of type
     ``text`` the input will be through a textarea element instead of
     a select element as expected from the default value
     specification.

* **Type of variable**: most of the types follows the mysql convention
  without modifiers (e.g. int instead of int(8)).  Other types are
  specific to Sci2Web_ (text,bool,file).  Valida datatypes are: int,
  float, varchar, bool, file and text.

* **Complete name of the variable**.  This name will be used as the
  text before the input element in the web form.

* **Tab**: the configuration window used to input the application
  control variables is divided in tabs.  Tabs allows you to create
  group of control variables having different effects on the
  applications.  For example you can distinguish among variables with
  the value of physical properties of your applications and variables
  controlling numerical attributes.  The Tab field in the substitution
  rule allows you to classify you control variables.  Variables
  without a Tab attribute will be classified in a ``Control
  Variables`` default tab.

* **Group**: in each tab variables are organized by groups.  This a
  second level of organization introduced specially to be used with
  very complex applications.  Variables without a Group attribute will
  be classified in a ``General`` default group.

* **ReadOnly**: this property is used to enable or disable the
  possibility to change the control variable through the web form.
  Left blank if you want to enable the input of the variable and use
  ``readonly`` to disable the input.

If you have a control variable in more than one file you should create
a template version of those files and place therein the respective
substitution rules.  In our sample application the file
``plot-out.gpl`` contains the number of particles as part of the figure
title.  In that case create a template copy ``.plot-out.gpl.temp`` and
put the substitution rule for the control vairable
``NumberParticles``::

  name="[[OutputFile::salida::varchar::Name of the output file]]"
  set title "Diffusion of [[NumberParticles]] particles"
  set term png
  set output name.'.png'
  plot name.'.txt' u 2:3 w p

Please notice that you do not need to use the complete substitution
rule in the second template file.  This behavior will save a lot of
work when parametrizing your application.

It is interesting to notice that control variables are not only
associated to *values* of real programming variables in your source
files.  Actually they can substitute complete parts of your files
regardless the content of the file or the role of the substituted
part.  In the ``parameters.ini`` example the control variable
substitute a single numeric value but in the ``plot-out.gpl`` example
substitute part of a string.

.. Important:: to simplify the parametrization of complex applications
   we recommend to create a master template file
   ``.defaultvalues.conf.temp`` containing the full substitution rules
   for all the control variables in your application.  Using this file
   you will avoid to fill your application template files with long
   substitution rules that will be made those file probably prune to
   errors.  In our sample application this master template file could
   be have the following lines::

    NumberParticles=[[NumberParticles::10000::int::Total number of particules]]
    MeanFreePath=[[MeanFreePath::0.1::float::Mean free path]]
    Width=[[Width::3::float]] 
    Height=[[Heigh::5::float]]
    OutputFile=[[OutputFile::salida::varchar::Name of the output file]]
   
   Once this file is created the application template files
   ``.parameters.ini.temp`` and ``.plot.gpl.temp`` will just contain
   simplified versions of the substitution rules.  For example the
   ``.parameters.ini.temp`` will now look much readable::

    [[NumberParticles]]
    [[MeanFreePath]]
    [[Width]] [[Heigh]]

There are finally a set of very important variables that should be set
up to complete the *parametrization* of your application. They are
called the *results variables*.  These variables are set up using an
already created template file ``sci2web/.results.info.temp``.  Copy
this file to the main directory of the application and edit it to add
the results variables associated to your application.  For our example
application we define a result variable called ``MeanDispersions``
that will be set after the execution of the application with the
average number of dispersions suffered by the dust particles::

   sci2web/.results.info.temp:

   MeanDispersions=[[MeanDispersions::0::float::Average number of dispersions::Results::General::This is a result variable::readonly]]

   % cp sci2web/.results.info.temp .

The ``tab`` and ``group`` for the results variables should not be
modified.  

.. Important:: In order to use properly the results variable feature
   of Sci2Web_ you should configure your application to write down the
   value of these variables after the execution of a running instance.
   For our example application it could be done for example changing
   the master source file including the following lines:

   Original code::

    for(i=ini;i<=N;i++){
      condition=((i%per)==0 || i==ini);
      [...]
      j=0;
      do{
	d=-lambda*log(drand48())*CUSTOM_UNITS;
	theta=2*M_PI*drand48();
	x=x+d*cos(theta);
	y=y+d*sin(theta);
	if(condition) fprintf(fp,"%d %e %e\n",j,x,y);
	j++;
      }while(x*(x-l)<=0 && y*(y-h)<=0);
      fprintf(fl,"%d\t%e\t%e\n",i,x,y);
      if(condition){
	fprintf(stdout,"i = %d, (x,y) = (%.2e,%.2e)\n",i,x,y);
	sleep((int)SLEEP);
      }
    }

   New code::

    nidsp=0;
    for(i=ini;i<=N;i++){
      condition=((i%per)==0 || i==ini);
      [...]
      j=0;
      do{
	d=-lambda*log(drand48())*CUSTOM_UNITS;
	theta=2*M_PI*drand48();
	x=x+d*cos(theta);
	y=y+d*sin(theta);
	if(condition) fprintf(fp,"%d %e %e\n",j,x,y);
	j++;
      }while(x*(x-l)<=0 && y*(y-h)<=0);
      ndisp+=j;
      
      fprintf(fl,"%d\t%e\t%e\n",i,x,y);
      if(condition){
	fprintf(stdout,"i = %d, (x,y) = (%.2e,%.2e)\n",i,x,y);
	sleep((int)SLEEP);
      }
    }
    ndisp=ndisp/N;
    FILE *fr;
    fr=fopen("results.info","w");
    fprintf(fr,"MeanDispersions=%lf\n",ndisp);
    fclose(fr);

   If you cannot change your source file or simply does not want to do
   it we recommend to use external scripts able to extract the results
   from any output of the program (standard or standard error, output
   files, etc.) 
    
Once you have selected the control and results variables and have
created the templates from the files where those variables appear you
are ready to test the generation of source files for your runs from
those templates.  This a critical step in the generation of new
instances of the application.  To perform this important step run::

    % perl sci2web/bin/sci2web.pl contvars --appdir .

Here we are using the symbolic link to the utility script binary
directory created in the sci2web subdirectory already installed after
the initialization of the application.  

This command create three files in the ``sci2web`` subdirectory:
``controlvars.info``, ``controlvars.sql`` and
``templates/Default.conf``.  The first one is the list of the control
variables classified by tabs and groups and properly formatted to be
used by the Sci2Web_ tool.  The second one is a sql file that will be
used in the installation step to create a table associated to the
particular version of the application where the values of the control
variables and other results are stored by each run created by the
community using the application. It is strongly recommended to avoid
the edition of this file.  The third and last file, ``Default.conf``
is a sample *run configuration file* containing the value of the
control variables that will be used to generate the files for a given
run.  In this case the values are the default ones defined when the
control variables were described using the substitution rule.

At this point you can try to generate the files for your application
using the template files and the default *run configuration file*
(``sci2web/templates/Default.conf``) just created.  To perform this
run::

    % perl sci2web/bin/sci2web.pl genfiles --runconf sci2web/templates/Default.conf --rundir .

This command will create the run files corresponding to each template
you have previously created.  In our sample they correspond to the
``parameters.ini`` and ``plot-out.gpl`` files.  Please check these
files and verify that they have the proper content.  Another file is
created ``run.conf``.  This is a copy of the run configuration file
and can be used to know what are the values of the control variables
used in a particular run.

You can play around modifying ``run.conf`` and generating again the
run files::

    % perl sci2web/bin/sci2web.pl genfiles --runconf run.conf --rundir .

This exercise will give you an idea if your template files and control
variable configuration files are properly prepared.

The ultimate test is to generate test run files using a particular set
of values properly set up in your ``run.conf`` and see if your
application compiles and run as expected.

Be sure that you have test it your newly configured application before
to proceed with the following steps.

Configure your application
==========================

Control variables are the most important component of a Sci2Web_
ported applications.  At this point you have initialized your
application and configured how a running instance will be parametrized
and generated through the control variables you have just defined.

There are other important aspects of your application that need to be
configured before to install it at the Sci2Web server site.  Please
follow carefully the next procedure to complete your configuration:

#. **The running pipeline**.  In real life every NDSA is normally ran
   following a fixed set of system commands, a.k.a. the *running
   pipeline*.  For example you could start by cleaning the run
   directory, then you compile your source files, run your
   application, perform several post-run actions and check your
   results.

   The Sci2Web_ control scripts run every ported application following
   a fixed pipeline that should be configured using the
   ``sci2web/runpipeline.conf`` file.  You can provide there the
   explicit commands (``<ACTION>CMD``, where ``<ACTION>`` could be
   ``CLEAN``, ``COMPLIE``, ``SUBMIT``, etc., see below) or the name of
   specially prepared scripts (``<ACTION>SCR``) that should be
   executed at each step of the running pipeline.

   The Sci2Web_ pipeline recognize the following set of actions:

   * *Clean*.  Clean of the run directory.  This action should be
     configured if the run directory must be cleaned before to run the
     application.

   * *Compile*.  Compile the source files of the application.  This
     action should be configured if your application requires some
     kind of compilation.  It should not be configured if you are
     using already compiled programs or not compiling languages
     (e.g. perl, bash, python).

   * *Preparation*.  Prepare the run directory to run the application.
     Configure this action if your application require some previous
     preparation before to run it.

   * *Submit*. Run the application.  Here you should say the system
     what is the particular command used to run your application.

   * *Pause*.  Pause a running application.  Configure this step only
     if your application could be paused.  Pausing is a special
     feature of an application that allows you to temporally suspend a
     running instance and resume it exactly where the computation be
     when the instance was interrupted.  Not all the applications
     could be paused but if you can program this feature in your
     source files it could be a very useful property.  Leave blanck
     both ``PAUSESCR`` and ``PAUSECMD`` variables if the application
     is not *pausable*.  In this case the action *Pause* will trigger
     the *Kill* action on the application.

   * *Stop*. Stop a running application.  Here applies the same
     recommendations given for the *Pause* step.

   * *Post*.  Commands to be executed after the running instance of
     the application has finished.

   * *Status*.  Check the status of the run.  The commands configure
     here should be able to return a number between 0 and 1 with the
     degree of advance of your run.  If you are not able to check this
     return a -1 value as the running status.

   The ``runpipeline.conf`` file for our example application will look
   like::

    #######################################################################
    #RUN PIPELINE
    #######################################################################

    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #CUSTOM CLEAN COMMAND OR SCRIPT
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    CLEANSCR=""
    CLEANCMD="make cleanall"

    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #CUSTOM COMPILE COMMAND OR SCRIPT
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    COMPILESCR=""
    COMPILECMD="make diffusion.out"

    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #CUSTOM PRE COMMAND OR SCRIPT
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    PRESCR=""
    PRECMD="make clean"

    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #CUSTOM SUBMIT COMMAND OR SCRIPT
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    SUBMITSCR=""
    SUBMITCMD="./diffusion.out salida.txt"

    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #CUSTOM PAUSE COMMAND OR SCRIPT
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    PAUSESCR=""
    PAUSECMD="echo Pausing..."

    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #CUSTOM RESUME COMMAND OR SCRIPT
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    RESUMESCR=""
    RESUMECMD="echo Resuming..."

    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #CUSTOM STOP COMMAND OR SCRIPT
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    STOPSCR=""
    STOPCMD="echo Stopping..."

    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #CUSTOM POST RUN COMMAND OR SCRIPT
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    POSTSCR=""
    POSTCMD="gnuplot plot-out.gpl"

    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    #CUSTOM STATUS COMMAND OR SCRIPT
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    STATUSSCR="stat.sh"
    STATUSCMD="echo -1"

   It should be mentioned that the ``<ACTION>SCR`` value overrides the
   ``<ACTION>CMD`` command.  Thus for example in the last part of the
   previous example file the ``STATUSSCR`` is executed beside the fact
   that a ``STATUSCMD`` has been also provided.

   It is strongly recommended to test the running pipeline
   configuration by trying to use the Sci2Web_ utility script
   ``sci2web.sh``.  This is the script that the Sci2Web_ web tools
   will use when trying to control your application.  Test it by
   running::

     % bash sci2web/bin/sci2web.sh clean

   If it works as expected, executing the Clean command or script you
   have configured in the ``runpipeline.conf`` file try to run other
   and more complex actions:
   
     % bash sci2web/bin/sci2web.sh compile
     % bash sci2web/bin/sci2web.sh pre

   The most critical action is the *Submit* one.  Verify that it works
   as expected::

     % bash sci2web/bin/sci2web.sh submit
     Executing action submit:
     Signal: submit
     Set submit
     warning: commands will be executed using /bin/sh
     job 457 at Fri Dec  9 10:56:00 2011
     
   If it works properly not only you will notice that the expected
   output files of your application will start to appear but also a
   set of ``.oxt`` files are generated: ``jobid``,
   ``pid``,``time_start``, ``time_end``, ``stdout``, ``stderr`` among
   others.  These files contain critical information about the running
   instance used by Sci2Web_ to display information related to your
   run.

   If any problem is detected please check the ``runpipeline.conf``
   configuration file and other scripts you are using to run your
   application.

   .. Important:: Sci2Web_ uses by default the batch execution system
      ``at``.  It will try to execute all the running instances on the
      local web server despite the fact that the processor is very
      busy. This is not a recommended configuration and should be used
      only if you are using Sci2Web_ for personal purposes.

      If you want to work with a different batch execution system the
      Sci2Web_ site server manager should change the ``sci2web.sh``
      script to prepare the job submission accordingly. 

      For example if you want to change ``at`` for ``batch`` (which
      launches proccesses only if the server load is low enough) you
      should replace the ``at now`` command for the ``bacth`` command
      in the following part of the ``sci2web.sh`` script::
       
	#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	#THESE LINES CAN BE CHANGED ACCORDING TO YOUR QUEUE SYSTEM 
	#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	if ! at now < /tmp/apprun.$$ &> /tmp/jobinfo.$$;then
	    echo "Error submitting your job:"
	    cat /tmp/jobinfo.$$
	    rm -rf /tmp/*.$$
	    exit 1
	fi
	cat /tmp/jobinfo.$$
	jobid=$(tail -n 1 /tmp/jobinfo.$$ | cut -f 2 -d ' ')
	echo $jobid > jobid.oxt
	#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   
   The utility script ``sci2web.sh`` includes another actions that
   could be useful for other purposes: **cleanall**, cleans all the
   run directory including files generated by the control script;
   **test**, performs a complete test on the running instance
   including pause, stop and resume commands; **kill**, kills the
   presently running instance; **status** check the status of the
   running instance.  You can run several action in tandem::

     % bash sci2web/bin/sci2web.sh cleanall compile pre submit

   This is the recommended way to test the running pipeline.

#. **Select common files**.  When Sci2Web_ creates a new instance of
   an application many files could be duplicated what compromises the
   storage capacity of tou web server.  Many of those duplicated files
   could be shared among different running instances reducing the
   space required to have an active Sci2Web_ application.  You can
   list the files that will be shared using the
   ``sci2web/sharedfiles.info`` file.  One object should be listed per
   line in this file.  For our example application if you want to
   share the files ``Makefile`` and all the files having the name
   diffussion, and the directory ``gsl`` the
   ``sci2web/sharedfiles.info`` will look like::

     Makefile
     diffusion.*
     gsl

#. **Select output files**.  When an instance of an application is
   finished Sci2Web_ stores by default all the results produced by the
   application in a results database.  It is obvious that many files
   involved in your application should not be stored since they are
   repeated among instances or they do not contain useful information.
   You can use the ``sci2web/outfiles.info`` to list, with a similar
   syntax as that used for the shared files, the most interesting
   files to be saved as results of your running instance.  For our
   example application this file could look like::

     *.dat
     *.png
     scratch
    
   All the ``.oxt`` and the ``.conf`` files, created and used by
   Sci2Web_ will be stored by default.

#. **Web interface configuration**.  The web interface of your
   application have the following components:

   * *The information web pages*.  This is a set of editable web pages
     containing information about your application.  These pages could
     be freely edit by the creator of the application and the
     crontibutors of the respective version.  These are the pages that
     any visitor will be first see when openning the page of your
     application.  It is strongly recommended to include in the web
     pages information as ecomplete as possible about your application
     including links to possible documentation (that could be also
     stored in the server site), download options (if applicable) or
     links to the Sci2Web_ documentation (specially to the user
     guide).

     You can disable the information web pages by editing the
     configuration file ``sci2web/version.conf`` and changing the
     variable ``VerTabs``.  This variable controls what tabs and in
     which order will be displayed in the application web page.  There
     are five fixed tabs: ``description``, ``documentation``,
     ``downloads``, ``runs``, ``database``.  To disable the
     information pages the version tabs variable should be::

       VerTabs = runs:Runs;database:Database

   * *The queue system*.  Sci2Web_ manages the execution of running
     instances of the mutiple applications installed in a server site
     in a similar fashion that a *job queue system*.  This feature is
     particularly useful when the installed applications normally
     takes a long time to be executed.  The queue system component of
     Sci2Web_ is a specially designed page where a list of the running
     or already ran applications are displayed.  Using this page you
     will be able to create a new instance (run your application),
     remove existent instances or control the execution of already
     created instances.  

     If your application is too simple and does not require a complete
     queue system you can switch to a simpler interface called the
     ``RunHistory`` mode.  Again the ``sci2web/version.conf`` file
     should be use to modify this behavior::
     
       QueueMode = RunHistory

     You can turn back to the queue system changing the name of the
     variable to ``QueueList`` (default choice).

       QueueMode = QueueList

   * *The results database*.  All the run instances succesfully
     executed with your applications and their result files will be by
     default stored in a big result database.  This is a very useful
     feature of Sci2Web_ that could allow a community to access
     already computed results that in other case will be very
     expensive to recompute.  

     Imagine this scenario: your application is able to compute the
     dynamical evolution of a two planets system changing the initial
     conditions of the biggest planet.  You could vary in a huge
     parameter space the initial properties of the big planet and
     every configuration is a single result.  After performing a
     complete parameter space exploration an user could store results
     that will be useful for others desiring to explore the same or an
     overlapping region of the parameter space.  With the results
     database all they have to do is search for the results already
     computed for that part of the parameter space and compute only
     new results in the unexplored region.

     Sci2Web_ provide to any application with a special designed page
     to search for results stored in the database.

     If your application is very simple or you do not want to store a
     big amount of data coming from all the results computed with your
     application disable this feature using the variable
     ``ResultsDatabase`` in the ``sci2web/version.conf`` file::

       ResultsDatabase = false

     You can turn in this feature in any moment by setting the value
     of this variable to ``true``.

   * *The configuration form window*. Probably the most important
     component of the whole web interface is the configuration window.
     This component allows the final user to input the value of the
     control variables, modify other properties of the running
     instance and control the execution of your application.  There
     are several attributes of the configuration window that can be
     customized:

      - TabHeight (value given in ``px`` or ``%``, default 80%):
        Height of the configuration tabs used to display the input
        forms for the control variables.
	
      - RunTab (boolean, default ``true``): Determines if a special
        tab is included to input potential editable information about
        the run.

      - FilesTab (boolean, default ``true``): Determines if a tab with
        the list of files associated to the run are displayed or not.

      - ControlButtons (boolean, default ``true``): Determines if the
        configuration window should have the buttons used to control
        the application.

     All these properties can be set up in the
     ``sci2web/version.conf`` file.

   * *The results window*.  The result window is an important
     component of the interface intended to display customizable
     information about the results of the running instance.  A
     separate configuration file ``sci2web/resultswindow.conf`` for
     this component is included and should be edited to change the
     default behavior::

       ###################################################
       #RESULTS WINDOW CONFIGURATION FILE
       #Use this file to describe your results window
       ###################################################

       #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       #STATUS AND CONTROL TAB
       #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       Tab=Status
       Content=Module:Status
       RefreshTime=5000

       #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       #STANDARD OUTPUT AND STANDARD ERROR
       #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       Tab=Output
       Content=File:stdout.oxt;File:stderr.oxt
       RefreshTime=1000

       #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       #FILES TAB
       #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       Tab=Files
       Content=Module:ListFiles?SubDir=.&Filter=*
       RefreshTime=-1

    As you can see there is an entry for every tab you want to include
    in the results window.  Every entry has three properties: ``Tab``
    (name of the tab), ``Content`` (content of the tab) and
    ``RefreshTimes`` (time to refresh the content of the tab).  

    The content of a tab could be selected among these options:

    - **File**: the content of the tab will the content of the file
      indicated after ':'.  The default file path is the run
      directory.
    
    - **Module**: a particular module programmed into the Sci2Web_
      tools.  Available modules are:

      + *Status*: show the status of the run.  No parameters are
        required.

      + *ListFiles*: list of files of a given subdirectory in the run
        directory.  Parameters: ``SubDir``, ``Filter``.

      Parameters are given to modules using the same syntax as ``php``
      scripts using an initial ``?`` and ``&`` to separate different
      module parameters.

    The ``RefreshTime`` is given in milliseconds.  You should be
    carefull to not set a very small refresh time for your tabs
    because it could load your web server with apache2 zombie
    processes.

Installing your application in your Sci2Web_ server site
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The last steps in order to have your application succesfully installed
in the Sci2Web_ server site is to copy the application files in the
server directory and register your application in the master database.
These steps could be executed with a single command::

   % perl SCI2WEB_PATH/bin/sci2web.pl install --appdir .

.. Important:: Notice that you should call the utility script
   ``sci2web.pl`` using the absolute path instead of using the
   symbolic link to the ``bin`` directory.  This command will fail to
   install your application::

     % perl sci2web/bin/sci2web.pl install --appdir .

Testing your newly ported application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If everything has been ran smoothly up to this point you are ready to
start using your application with a brand new web interface!

But, wait a minute! Your work has not ended here.  Probably it has
just started.  As every programming task you do not end until you have
ran and test your application in its final form.  So go to the
Sci2Web_ server site URL, sign up or sign in into an account and start
testing your application.  Seeing your application in action will give
you hints to modify the configuration you have just completed.  The
process will finish only when you are completely satisfied with the
result.  And even thens you will still have to wait for the bug reports
the user community using your application will start to send you.

From now on, start to work directly in the application directory at
your Sci2Web_ server site.  Only the changes performed there will be
reflected in the running instances created from the web interface.  

Good luck!

-----------------------

Copyright (C) 2011 Jorge I. Zuluaga
